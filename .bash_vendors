#!/bin/bash
# ╔═════════════════════════════════════════════════════════════════╗
# ║ BASH_VEDNORS                                                    ║
# ╠═════════════════════════════════════════════════════════════════╣
# ║ Entry Point to all Bash Utilities                               ║
# ╚═════════════════════════════════════════════════════════════════╝

if (( $+commands[direnv] )) > /dev/null 2>&1; then
  eval "$(direnv hook bash)"
fi

export EDITOR="/usr/bin/micro"
export CONFIGDIR=$HOME/.config
export WORKSPACE=$HOME/workspace
export PROGRAMS=$HOME/Programs

export PATH=$PATH:$PROGRAMS/doublecmd
export PATH=$PATH:$PROGRAMS/wtf

# ╔═════════════════════════════════════════════════════════════════╗
# ║ JDK / Android SDK                                               ║
# ╠═════════════════════════════════════════════════════════════════╣
# ╚═════════════════════════════════════════════════════════════════╝


export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
# export JDK_HOME="/usr/lib/jvm/jdk1.8.0"
# export JRE_HOME="/usr/lib/jvm/jdk1.8.0/jre"


export ANDROID_HOME=$PROGRAMS/Android
export PATH=$PATH:$PROGRAMS
export PATH=$PATH:$PROGRAMS/android-studio
export PATH=$PATH:$PROGRAMS/flutter/bin
export PATH=$PATH:$ANDROID_HOME/cmdline-tools/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH=$PATH:$ANDROID_HOME/emulator


# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) Kubernetes                                           │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘
if (( $+commands[kubectl] )) >/dev/null 2>&1; then
  source <(kubectl completion bash)
fi

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) Wine Compat mode (XP) and Resize Font $ winecfg      │
# └─────────────────────────────────────────────────────────────────┘
if [ -f /usr/bin/wine ]; then
  export WINEARCH=win32       # Use 32-bit to fix black boxes on some apps
  export WINEPREFIX=~/.wine32 # This can be emplty
  # winecfg # Run this after (see title few lines up)
fi

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) Rust Language Environment                            │
# └─────────────────────────────────────────────────────────────────┘
if [ -f $HOME/.cargo/env ]; then
  source $HOME/.cargo/env
fi

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) Node/Yarn Related                                    │
# ├─────────────────────────────────────────────────────────────────┤
# │ Place ~/.yarn before ~/.npm so is takes presedense.             │
# └─────────────────────────────────────────────────────────────────┘
# JS Package Manager Related
[[ -f ~/.npm-completion ]] && source ~/.npm-completion
[[ -f ~/.yarn-completion ]] && source ~/.yarn-completion
[[ -f ~/.docker-complete ]] && source ~/.docker-complete
[[ -d ~/.yarn/bin ]] && export PATH=$PATH:~/.yarn/bin

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) GoLang                                               │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘
if [ -d /usr/local/go ]; then
  export GOPATH=$HOME/go
  export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
fi

export PATH=$PATH:$HOME/.cargo/bin

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) PyEnv (Python Version Manager)                       │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘
if [ -d $HOME/.pyenv ]; then

  # @install https://github.com/pyenv/pyenv#installation
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"

  # Autocompelte
  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
  fi

fi


# ___________________________________________________________________
#
#                           PYTHON
#
#            Virtualenvwrapper: Globally or Pyenv installation
# ___________________________________________________________________

if [ -d ~/.virtualenvs ]; then
  export WORKON_HOME=~/.virtualenvs
  export PROJECT_HOME="$WORKSPACE/py-projects"
  export PIP_VIRTUALENV_BASE=~/.virtualenvs

  eval "$(pyenv init -)"

  alias mkvirtualenv="mkvirtualenv --no-site-packages --distribute"

  if [ -d ~/.pyenv/plugins/pyenv-virtualenvwrapper ]; then
    # Allow PyEnv Virtualenvwrapper to create venvs
    # Auto activate virtualenvs on directory change
    eval "$(~/.pyenv/bin/pyenv virtualenv-init -)"
    export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
  fi
fi

export PYTHONDONTWRITEBYTECODE=1  # Stop Python from generating bytecode files


# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) GVM (GoLang Version Manager)                         │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘

if [ -s $HOME/.gvm/scripts/gvm ]; then
    source "$HOME/.gvm/scripts/gvm"
fi

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) NVM (Node Version Manager)                           │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘
if [ -d $HOME/.nvm ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
  # Loads NVM bash_completion
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  load-nvmrc() {
    if [[ -f .nvmrc && -r .nvmrc ]]; then
      nvm use
    elif [[ $(nvm version) != $(nvm version default)  ]]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }

  cd() { builtin cd "$@"; 'load-nvmrc'; }
fi

# ┌─────────────────────────────────────────────────────────────────┐
# │ GRC Color Highlighting                                          │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘
if hash grc &>/dev/null; then

   if [ -f "$HOME/.grc/grc.bashrc" ]; then
    source "$HOME/.grc/grc.bashrc"
  fi
fi

# ┌─────────────────────────────────────────────────────────────────┐
# │ (Optional) NPM (Node Global Packages Manager)                           │
# ├─────────────────────────────────────────────────────────────────┤
# └─────────────────────────────────────────────────────────────────┘

export NPM_PACKAGES="$HOME/.npm-packages"
export NODE_PATH="$NODE_PATH:$NPM_PACKAGES/lib/node_modules"
# Unset manpath so we can inherit from /etc/manpath via the `manpath`
# command
export PATH="$PATH:$NPM_PACKAGES/bin"
###-tns-completion-start-###
if [ -f /home/voznik/.tnsrc ]; then
    source /home/voznik/.tnsrc
fi
###-tns-completion-end-###


### LLMs
export OLLAMA_MODELS="$PROGRAMS/ollama/models"

