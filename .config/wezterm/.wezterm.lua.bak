-- Pull in the wezterm API
local wezterm = require('wezterm')
-- local session_manager = require("wezterm-session-manager")
local mux = wezterm.mux
local config = {}

wezterm.on('gui-startup', function()
   local tab, pane, window = mux.spawn_window({})
   window:gui_window():maximize()
   -- session_manager.restore_state(window:gui_window())
end)

wezterm.on('save_session', function(window)
   -- session_manager.save_state(window)
end)
wezterm.on('load_session', function(window)
   -- session_manager.load_state(window)
end)
wezterm.on('restore_session', function(window)
   -- session_manager.restore_state(window)
end)

-- In newer versions of wezterm, use the config_builder which will
-- help provide clearer error messages
if wezterm.config_builder then
   config = wezterm.config_builder()
end

-- This is where you actually apply your config choices
-- For example, changing the color scheme:
config.color_scheme = 'Dracula (base16)' -- "Material Palenight (base16)"
config.scrollback_lines = 4000
config.enable_scroll_bar = true
config.font = wezterm.font_with_fallback({
   'Monaspace Argon',
   'Hasklig',
   --'Fira Code',
   'Ubuntu Mono derivative Powerline',
})
config.font_size = 12
config.window_background_opacity = 1
config.default_cursor_style = 'BlinkingBlock'
config.cursor_blink_rate = 500
config.hide_tab_bar_if_only_one_tab = true
config.window_padding = {
   left = '2px',
   right = '2px',
   top = 0,
   bottom = 0,
}
config.window_frame = {
   -- The font used in the tab bar.
   -- Roboto Bold is the default; this font is bundled
   -- with wezterm.
   -- Whatever font is selected here, it will have the
   -- main font setting appended to it to pick up any
   -- fallback fonts you may have used there.
   font = wezterm.font({ family = 'Monaspace Kreon', weight = 'Bold' }),

   -- The size of the font in the tab bar.
   -- Default to 10.0 on Windows but 12.0 on other systems
   font_size = 11.0,

   -- The overall background color of the tab bar when
   -- the window is focused
   active_titlebar_bg = '#282936',

   -- The overall background color of the tab bar when
   -- the window is not focused
   inactive_titlebar_bg = '#3a3c4e',
}

config.colors = {
   tab_bar = {
      -- The color of the inactive tab bar edge/divider
      inactive_tab_edge = '#575757',
   },
}

config.exit_behavior = 'CloseOnCleanExit'

config.inactive_pane_hsb = {
   -- saturation = 0.75,
   brightness = 0.75,
}
config.adjust_window_size_when_changing_font_size = false
config.hide_tab_bar_if_only_one_tab = true
-- !!! KEYS
-- timeout_milliseconds defaults to 1000 and can be omitted
config.leader = { key = 'k', mods = 'CTRL', timeout_milliseconds = 2000 }
config.disable_default_key_bindings = true
config.keys = {
   { key = 'l', mods = 'CTRL|SHIFT', action = wezterm.action.ActivateTabRelative(1) },
   { key = 'h', mods = 'CTRL|SHIFT', action = wezterm.action.ActivateTabRelative(-1) },
   { key = 'PageUp', mods = 'CTRL', action = wezterm.action.ActivateTabRelative(-1) },
   { key = 'PageDown', mods = 'CTRL', action = wezterm.action.ActivateTabRelative(1) },
   { key = 'h', mods = 'CTRL', action = wezterm.action.ActivatePaneDirection('Left') },
   { key = 'l', mods = 'CTRL', action = wezterm.action.ActivatePaneDirection('Right') },
   { key = 'k', mods = 'CTRL', action = wezterm.action.ActivatePaneDirection('Up') },
   { key = 'j', mods = 'CTRL', action = wezterm.action.ActivatePaneDirection('Down') },
   {
      key = 'LeftArrow',
      mods = 'CTRL|SHIFT',
      action = wezterm.action.ActivatePaneDirection('Left'),
   },
   {
      key = 'RightArrow',
      mods = 'CTRL|SHIFT',
      action = wezterm.action.ActivatePaneDirection('Right'),
   },
   { key = 'UpArrow', mods = 'CTRL|SHIFT', action = wezterm.action.ActivatePaneDirection('Up') },
   {
      key = 'DownArrow',
      mods = 'CTRL|SHIFT',
      action = wezterm.action.ActivatePaneDirection('Down'),
   },
   { key = 'LeftArrow', mods = 'ALT|SHIFT', action = wezterm.action.AdjustPaneSize({ 'Left', 5 }) },
   {
      key = 'RightArrow',
      mods = 'ALT|SHIFT',
      action = wezterm.action.AdjustPaneSize({ 'Right', 5 }),
   },
   { key = 'UpArrow', mods = 'ALT|SHIFT', action = wezterm.action.AdjustPaneSize({ 'Up', 5 }) },
   { key = 'DownArrow', mods = 'ALT|SHIFT', action = wezterm.action.AdjustPaneSize({ 'Down', 5 }) },
   {
      key = 'd',
      mods = 'CTRL|ALT',
      action = wezterm.action.SplitVertical({ domain = 'CurrentPaneDomain' }),
   },
   {
      key = 'r',
      mods = 'CTRL|ALT',
      action = wezterm.action.SplitHorizontal({ domain = 'CurrentPaneDomain' }),
   },
   { key = 'w', mods = 'CTRL', action = wezterm.action.CloseCurrentPane({ confirm = false }) },
   { key = 'q', mods = 'CTRL|SHIFT', action = wezterm.action.CloseCurrentPane({ confirm = true }) },
   { key = 'b', mods = 'LEADER|CTRL', action = wezterm.action.SendString('\x02') },
   --
   { key = 'l', mods = 'CTRL|ALT', action = wezterm.action.ShowLauncher },
   { key = 'n', mods = 'CTRL|SHIFT', action = wezterm.action.SpawnWindow },
   { key = 't', mods = 'CTRL|SHIFT', action = wezterm.action.SpawnTab('CurrentPaneDomain') },
   { key = 'Enter', mods = 'SUPER', action = wezterm.action.ActivateCopyMode },
   { key = 'C', mods = 'CTRL|SHIFT', action = wezterm.action.CopyTo('Clipboard') },
   { key = 'v', mods = 'CTRL', action = wezterm.action.PasteFrom('Clipboard') },
   {
      key = 'u',
      mods = 'CTRL|SHIFT',
      action = wezterm.action.CharSelect({
         copy_on_select = true,
         copy_to = 'ClipboardAndPrimarySelection',
      }),
   },
   {
      key = 'K',
      mods = 'CTRL|SHIFT',
      action = wezterm.action.ClearScrollback('ScrollbackAndViewport'),
   },
   { key = 'PageUp', mods = 'SHIFT', action = wezterm.action.ScrollByPage(-1) },
   { key = 'PageDown', mods = 'SHIFT', action = wezterm.action.ScrollByPage(1) },
   --
   { key = 's', mods = 'LEADER', action = wezterm.action({ EmitEvent = 'save_session' }) },
   { key = 'l', mods = 'LEADER', action = wezterm.action({ EmitEvent = 'load_session' }) },
   { key = 'r', mods = 'LEADER', action = wezterm.action({ EmitEvent = 'restore_session' }) },
   { key = 'i', mods = 'LEADER', action = wezterm.action.ShowDebugOverlay },
}
-- Mousing bindings
config.mouse_bindings = {
   -- Change the default click behavior so that it only selects
   -- text and doesn't open hyperlinks
   {
      event = { Up = { streak = 1, button = 'Left' } },
      mods = 'NONE',
      action = wezterm.action.CompleteSelection('ClipboardAndPrimarySelection'),
   },
   -- and make CTRL-Click open hyperlinks
   {
      event = { Up = { streak = 1, button = 'Left' } },
      mods = 'CTRL',
      action = wezterm.action.OpenLinkAtMouseCursor,
   },
   {
      event = { Down = { streak = 3, button = 'Left' } },
      action = wezterm.action.SelectTextAtMouseCursor('SemanticZone'),
      mods = 'NONE',
   },
}

return config
